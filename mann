
############################################################################################################################################3
data "aws_security_group" "previous-sg" {
  id = "sg-0f463e75be16d4c3a" #existing security group id
}

data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}

resource "aws_instance" "web" {
  ami                    = data.aws_ami.ubuntu.id
  instance_type          = "t2.micro"
  availability_zone      = "us-east-1a"
  key_name               = "lti-mahape-key"
  vpc_security_group_ids = [data.aws_security_group.previous-sg.id]
  tags = {
    Name = "HelloWorld"
  }
}

#########################################################################################################
resource "aws_instance" "web-access" {
  ami               = "ami-05ffe3c48a9991133"
  instance_type     = "t2.micro"
  key_name          = "deployer-key"
  availability_zone = "us-east-1a"
  security_groups   = ["${aws_security_group.new-sgg.name}"]
  root_block_device {
    volume_size           = "26"
    volume_type           = "gp2"
    delete_on_termination = true
  }

  #additional data disk
  ebs_block_device {
    device_name           = "/dev/xvdb"
    volume_size           = "10"
    volume_type           = "gp2"
    delete_on_termination = true
  }

  user_data = <<-EOF
        #!/bin/bash
        sudo yum install httpd -y
        sudo systemctl start httpd
        sudo systemctl enable httpd
        echo "<h1>sample webserver using terraform</h1>" | sudo tee /var/www/html/index.html
  EOF

  tags = {
    Name = "HelloWorld"
  }
}
resource "aws_key_pair" "deployer-key" {
  key_name   = "deployer-key"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCsONMWjvRXfCm6ZWCSMBhNMSrSgcI/kSz2fwSGkyar/nFGtHoPG9bMG0sIVwyixtSbYb2dfhqKafQq2cYRl6OtsmOPEUukZpWtbz4LzZKd6QXTItPi+5+URp4Llw+fvbK31DOMLZl3SKXp1WCGKSK6Nb0HCWT+H8KYi/bh4QbrfihvgkHYSDUOxhq2shV6IteoiAXWbzxfTVqci6+ekvB13sQlVYCG4D+2tITvdhIVVIVZOXCYTEPDBlMM0pq+um8X8OjJRzL0MWE19rzZ4KqgXjdVaF9N0VKsJlBI5pn9PEW7+zfLlwe6/gos7Bq1wAhKcpj45uEp590Xruk7S7zUF7yCpNHpTqTIHi/1WwEj5F4ks9DE6lB89Doda+guEVtJNM+wlErqTxu0eCcsPhZgQMju2YKuOQUsWIyufTJIYVaRJrOwiup8PbU5HUAeQHpSiSWCHVet8DWH1yNrlJ09X933MRciPFmVAqD3aTaKR9MFBGWWl/HVp1VAZOopTvs= root@terra.example.com"
}
resource "aws_security_group" "new-sgg" {
  name        = "new-sgg"
  description = "Allow TLS inbound traffic and all outbound traffic"

  tags = {
    Name = "new-sgg"
  }
}


resource "aws_vpc_security_group_ingress_rule" "allow_ssh" {
  security_group_id = aws_security_group.new-sgg.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 22
  ip_protocol       = "tcp"
  to_port           = 22
}

resource "aws_vpc_security_group_ingress_rule" "allow_http" {
  security_group_id = aws_security_group.new-sgg.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 80
  ip_protocol       = "tcp"
  to_port           = 80
}

resource "aws_vpc_security_group_ingress_rule" "allow_https" {
  security_group_id = aws_security_group.new-sgg.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 443
  ip_protocol       = "tcp"
  to_port           = 443
}

resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv4" {
  security_group_id = aws_security_group.new-sgg.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1"
}
###################################################################################################
provider "aws" {
  region = "us-east-1"

}

#This is VPC code

resource "aws_vpc" "test-vpc" {
  cidr_block = "10.0.0.0/16"
}

# this is Subnet code
resource "aws_subnet" "public-subnet" {
  vpc_id            = aws_vpc.test-vpc.id
  availability_zone = "us-east-1a"
  cidr_block        = "10.0.0.0/24"

  tags = {
    Name = "Public-subnet"
  }
}


resource "aws_subnet" "private-subnet" {
  vpc_id            = aws_vpc.test-vpc.id
  availability_zone = "us-east-1b"
  cidr_block        = "10.0.1.0/24"

  tags = {
    Name = "Private-subnet" #security group
  }
}
resource "aws_security_group" "test_access" {
  name        = "test_access"
  vpc_id      = aws_vpc.test-vpc.id
  description = "allow ssh and http"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }


}
#security group end here#internet gateway code
resource "aws_internet_gateway" "test-igw" {
  vpc_id = aws_vpc.test-vpc.id

  tags = {
    Name = "test-igw"
  }
}


#Public route table code

resource "aws_route_table" "public-rt" {
  vpc_id = aws_vpc.test-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.test-igw.id
  }


  tags = {
    Name = "public-rt"

  }
}
#route Tatable assosication code
resource "aws_route_table_association" "public-asso" {
  subnet_id      = aws_subnet.public-subnet.id
  route_table_id = aws_route_table.public-rt.id
}
#ec2 code
resource "aws_instance" "srivalli-server" {
  ami             = "ami-05ffe3c48a9991133"
  subnet_id       = aws_subnet.public-subnet.id
  instance_type   = "t2.micro"
  security_groups = ["${aws_security_group.test_access.id}"]
  key_name        = "lti-mahape-key"
  tags = {
    Name     = "test-World"
    Stage    = "testing"
    Location = "hyderabad"
  }

}


##create an EIP for EC2
resource "aws_eip" "srivalli-ec2-eip" {
  instance = aws_instance.srivalli-server.id
}


###this is database ec2 code
resource "aws_instance" "database-server" {
  ami             = "ami-05ffe3c48a9991133"
  subnet_id       = aws_subnet.private-subnet.id
  instance_type   = "t2.micro"
  security_groups = ["${aws_security_group.test_access.id}"]
  key_name        = "lti-mahape-key"
  tags = {
    Name     = "db-World"
    Stage    = "stage-base"
    Location = "mumbai"
  }

}
##create a public ip for Nat gateway
resource "aws_eip" "nat-eip" {
}
### create Nat gateway
resource "aws_nat_gateway" "my-ngw" {
  allocation_id = aws_eip.nat-eip.id
  subnet_id     = aws_subnet.public-subnet.id
}

#create private route table
resource "aws_route_table" "private-rt" {
  vpc_id = aws_vpc.test-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.my-ngw.id
  }


  tags = {
    Name = "private-rt"
  }
}
##route Tatable assosication code
resource "aws_route_table_association" "private-asso" {
  subnet_id      = aws_subnet.private-subnet.id
  route_table_id = aws_route_table.private-rt.id
}                                                                                                                                                                                                     
